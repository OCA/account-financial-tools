-
  I create a move
-
  !record {model: account.move, id: move3}:
    journal_id: account.sales_journal
    line_id:
      - name: Receivable line
        account_id: account.a_recv
        debit: 3000.0
      - name: Sales line
        account_id: account.a_sale
        credit: 3000.0
-
  I check that the move is still draft
-
  !assert {model: account.move, id: move3}:
    - state == 'draft'
-
  I create a wizard with a long ETA
-
  !record {model: validate.account.move, id: wiz_marker4}:
    action: mark
    eta: 10000
-
  I set the period and the journal on the wizard
-
  !python {model: validate.account.move}: |
    move = self.pool['account.move'].browse(cr, uid, ref('move3'),
                                            context=context)
    journal_ids = [(6, 0, [move.journal_id.id])]
    period_ids = [(6, 0, [move.period_id.id])]
    vals = {'journal_ids': journal_ids,
            'period_ids': period_ids,
            }
    self.write(cr, uid, ref('wiz_marker4'), vals, context=context)
-
  I run the wizard
-
  !python {model: validate.account.move}: |
    context['automated_test_execute_now'] = True
    self.validate_move(
      cr, uid, [ref('wiz_marker4')], context=context
    )
-
  I read the UUID from the move, delete the move, then dequeue the job and run it.
  It should raise no exceptions.
-
  !python {model: account.move}: |
    from openerp.addons.connector.queue.job import OpenERPJobStorage
    from openerp.addons.connector.session import ConnectorSession

    move = self.browse(cr, uid, ref('move3'), context=context)
    uuid = move.post_job_uuid

    assert uuid, 'The Job has not been created.'
    self.unlink(cr, uid, ref('move3'), context=context)

    session = ConnectorSession(cr, uid, context=context)
    storage = OpenERPJobStorage(session)

    myjob = storage.load(uuid)
    myjob.perform(session)

    assert myjob.result == u'Nothing to do because the record has been deleted'
